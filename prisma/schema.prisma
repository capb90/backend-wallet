generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ReportStatus {
  CREATED
  FINISHED
  CLOSED
  ARCHIVED

  @@map("report_status")
}

enum TypePayment {
  TIME_LESS
  QUOTA_LESS

  @@map("type_payment")
}

enum LoanStatus {
  ACTIVE
  PAID
  ARCHIVED

  @@map("loan_status")
}

enum AuthType {
  LOCAL
  GOOGLE

  @@map("auth_type")
}

enum UserStatus {
  ACTIVE
  INACTIVE

  @@map("user_status")
}

enum AttachmentEntity {
  EXPENSE
  INCOME

  @@map("attachment_entity")
}

enum NotificationStatus {
  SENT
  READ

  @@map("notification_status")
}

//User model
model User {
  id          Int        @id @unique @default(autoincrement())
  fullName    String     @map("full_name") @db.VarChar(256)
  email       String     @unique
  verifyEmail Boolean    @default(false) @map("verify_email")
  password    String?
  image       String?
  status      UserStatus @default(ACTIVE)
  lastLogin   DateTime?  @map("last_login") @db.Timestamp()
  createdAt   DateTime   @default(now()) @map("created_at") @db.Timestamp()
  updatedAt   DateTime?  @updatedAt @map("updated_at") @db.Timestamp()

  //Prisma Client
  notifications        Notification[]
  reports              Report[]               @relation("CreateReports")
  updateReports        Report[]               @relation("UpdateReports")
  sharedReports        SharedReport[]
  expenses             Expense[]
  reportExpenses       ReportExpense[]        @relation("CreateReportExpenses")
  updateReportExpenses ReportExpense[]        @relation("UpdateReportExpenses")
  expenseComments      ReportExpenseComment[]
  incomes              Income[]
  reportIncomes        ReportIncome[]         @relation("CreateReportIncomes")
  updateReportIncomes  ReportIncome[]         @relation("UpdateReportIncomes")
  incomeComments       ReportIncomeComment[]
  loans                Loan[]
  savings              Saving[]
  uploadedAttachments  ReportAttachment[]
  accounts             Account[]
  sessions             Session[]
  Authenticator        Authenticator[]

  @@map("user")
}

//Auth Js schemas required
model Account {
  userId            Int       @map("user_id")
  type              String
  provider          String
  providerAccountId String    @map("provider_account_id")
  refreshToken      String?   @map("refresh_token")
  accessToken       String?   @map("access_token")
  expiresAt         Int?      @map("expires_at")
  tokenType         String?   @map("token_type")
  scope             String?
  idToken           String?   @map("id_token")
  sessionState      String?   @map("session_state")
  createdAt         DateTime  @default(now()) @map("created_at") @db.Timestamp()
  updatedAt         DateTime? @updatedAt @map("updated_at") @db.Timestamp()

  //Prisma Client
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("account")
}

model Session {
  sessionToken String    @unique @map("session_token")
  userId       Int       @map("user_id")
  expires      DateTime
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamp()
  updatedAt    DateTime? @updatedAt @map("updated_at") @db.Timestamp()

  //Prisma Client
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_token")
}

model Authenticator {
  credentialID         String  @unique @map("credential_id")
  userId               Int     @map("user_id")
  providerAccountId    String  @map("provider_account_id")
  credentialPublicKey  String  @map("credential_public_key")
  counter              Int
  credentialDeviceType String  @map("credential_device_type")
  credentialBackedUp   Boolean @map("credential_backed_up")
  transports           String?

  //Prisma Client
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
  @@map("authenticator")
}

//End Auth Js schemas required

model Notification {
  id        Int                @id @unique @default(autoincrement())
  message   String
  userId    Int                @map("user_id")
  status    NotificationStatus @default(SENT)
  createdAt DateTime           @default(now()) @map("created_at") @db.Timestamp()

  //Prisma Client
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification")
}

//Report model
model Report {
  id         Int          @id @unique @default(autoincrement())
  name       String       @db.VarChar(256)
  startDate  DateTime     @default(now()) @map("start_date") @db.Date
  finishDate DateTime?    @map("finish_date") @db.Date
  status     ReportStatus @default(CREATED)
  userId     Int          @map("user_id")
  updateById Int?         @map("update_by_id")
  createdAt  DateTime     @default(now()) @map("created_at") @db.Timestamp()
  updatedAt  DateTime?    @updatedAt @map("updated_at") @db.Timestamp()

  //Prisma Client
  sharedReports  SharedReport[]
  reportExpenses ReportExpense[]
  reportIncomes  ReportIncome[]
  property       ReportProperty?
  attachments    ReportAttachment[]

  user       User  @relation("CreateReports", fields: [userId], references: [id], onDelete: Cascade)
  updateUser User? @relation("UpdateReports", fields: [updateById], references: [id], onDelete: SetNull)

  @@unique([name, userId, startDate, finishDate])
  @@map("report")
}

model ReportProperty {
  id           Int       @id @unique @default(autoincrement())
  reportId     Int       @unique @map("report_id")
  goalExpenses Decimal   @map("goal_expenses")
  goalIncome   Decimal?  @map("goal_income")
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamp()
  updatedAt    DateTime? @updatedAt @map("updated_at") @db.Timestamp()

  //Prisma Client
  report Report @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@map("report_property")
}

model Category {
  id        Int       @id @unique @default(autoincrement())
  name      String    @db.VarChar(256)
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp()
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamp()

  //Prisma Client
  expenses          Expense[]
  expenseProperties ReportExpenseProperty[]

  @@map("category")
}

model SharedReport {
  id           Int       @id @unique @default(autoincrement())
  userId       Int       @map("user_id")
  reportId     Int       @map("report_id")
  permissionId Int       @map("permission_id")
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamp()
  updatedAt    DateTime? @updatedAt @map("updated_at") @db.Timestamp()

  //Prisma Client
  user       User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  report     Report           @relation(fields: [reportId], references: [id], onDelete: Cascade)
  permission PermissionReport @relation(fields: [permissionId], references: [id], onDelete: Restrict)

  @@unique([userId, reportId])
  @@index([userId])
  @@map("shared_report")
}

model PermissionReport {
  id        Int       @id @unique @default(autoincrement())
  name      String    @unique @db.VarChar(256)
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp()
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamp()

  //Prisma Client
  sharedReports SharedReport[]

  @@map("permission_report")
}

model Expense {
  id          Int       @id @unique @default(autoincrement())
  name        String    @db.VarChar(256)
  description String?
  userId      Int       @map("user_id")
  categoryId  Int?      @map("category_id")
  active      Boolean   @default(true)
  amount      Decimal   @db.Decimal(15, 2)
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamp()
  updatedAt   DateTime? @updatedAt @map("updated_at") @db.Timestamp()

  //Prisma Client
  reportExpenses ReportExpense[]
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  category       Category?       @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  @@unique([name, userId])
  @@map("expense")
}

model Income {
  id          Int       @id @unique @default(autoincrement())
  name        String    @db.VarChar(256)
  description String?
  amount      Decimal   @db.Decimal(15, 2)
  userId      Int       @map("user_id")
  active      Boolean   @default(true)
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamp()
  updatedAt   DateTime? @updatedAt @map("updated_at") @db.Timestamp()

  //Prisma Client
  reportIncomes ReportIncome[]
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([name, userId])
  @@map("income")
}

model ReportExpense {
  id              Int       @id @unique @default(autoincrement())
  reportId        Int       @map("report_id")
  reportedDate    DateTime  @default(now()) @map("reported_date") @db.Timestamp()
  nameExpense     String    @map("name_expense") @db.VarChar(256)
  expenseAmount   Decimal   @map("expense_amount") @db.Decimal(15, 2)
  parentExpenseId Int?      @map("parent_expense_id")
  userId          Int       @map("user_id")
  active          Boolean   @default(true)
  updateById      Int?      @map("update_by_id")
  createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamp()
  updatedAt       DateTime? @updatedAt @map("updated_at") @db.Timestamp()

  //Prisma Client
  comments   ReportExpenseComment[]
  property   ReportExpenseProperty?
  report     Report                 @relation(fields: [reportId], references: [id], onDelete: Cascade)
  expense    Expense?               @relation(fields: [parentExpenseId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  user       User                   @relation("CreateReportExpenses", fields: [userId], references: [id], onDelete: Cascade)
  updateUser User?                  @relation("UpdateReportExpenses", fields: [updateById], references: [id], onDelete: SetNull)

  @@index([reportId, reportedDate])
  @@map("report_expense")
}

model ReportExpenseProperty {
  id              Int     @id @unique @default(autoincrement())
  categoryId      Int?    @map("category_id")
  reportExpenseId Int     @unique @map("report_expense_id")
  description     String?

  //Prisma Client
  category      Category?     @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  reportExpense ReportExpense @relation(fields: [reportExpenseId], references: [id], onDelete: Cascade)

  @@map("report_expense_property")
}

model ReportExpenseComment {
  id              Int       @id @unique @default(autoincrement())
  reportExpenseId Int       @map("report_expense_id")
  comment         String
  userId          Int       @map("user_id")
  parentCommentId Int?      @map("parent_comment_id")
  createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamp()
  updatedAt       DateTime? @updatedAt @map("updated_at") @db.Timestamp()

  //Prisma Client
  user             User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  reportExpense    ReportExpense          @relation(fields: [reportExpenseId], references: [id], onDelete: Cascade)
  childrenComments ReportExpenseComment[] @relation("ChildrenComments")
  parentComment    ReportExpenseComment?  @relation("ChildrenComments", fields: [parentCommentId], references: [id], onDelete: Cascade)

  @@index([reportExpenseId, parentCommentId])
  @@map("report_expense_comment")
}

model ReportIncome {
  id             Int       @id @unique @default(autoincrement())
  reportId       Int       @map("report_id")
  reportedDate   DateTime  @default(now()) @map("reported_date") @db.Timestamp()
  nameIncome     String    @map("name_income") @db.VarChar(256)
  incomeAmount   Decimal   @map("income_amount") @db.Decimal(15, 2)
  parentIncomeId Int?      @map("parent_income_id")
  userId         Int       @map("user_id")
  description    String?
  active         Boolean   @default(true)
  updateById     Int?      @map("update_by_id")
  createdAt      DateTime  @default(now()) @map("created_at") @db.Timestamp()
  updatedAt      DateTime? @updatedAt @map("updated_at") @db.Timestamp()

  //Prisma Client
  comments   ReportIncomeComment[]
  report     Report                @relation(fields: [reportId], references: [id], onDelete: Cascade)
  income     Income?               @relation(fields: [parentIncomeId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  user       User                  @relation("CreateReportIncomes", fields: [userId], references: [id], onDelete: Cascade)
  updateUser User?                 @relation("UpdateReportIncomes", fields: [updateById], references: [id], onDelete: SetNull)

  @@index([reportId, reportedDate])
  @@map("report_income")
}

model ReportIncomeComment {
  id              Int       @id @unique @default(autoincrement())
  reportIncomeId  Int       @map("report_income_id")
  comment         String
  userId          Int       @map("user_id")
  parentCommentId Int?      @map("parent_comment_id")
  createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamp()
  updatedAt       DateTime? @updatedAt @map("updated_at") @db.Timestamp()

  //Prisma Client
  user             User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  reportIncome     ReportIncome          @relation(fields: [reportIncomeId], references: [id], onDelete: Cascade)
  childrenComments ReportIncomeComment[] @relation("ChildrenIncomesComments")
  parentComment    ReportIncomeComment?  @relation("ChildrenIncomesComments", fields: [parentCommentId], references: [id], onDelete: Cascade)

  @@index([reportIncomeId, parentCommentId])
  @@map("report_income_comment")
}

model ReportAttachment {
  id              Int              @id @unique @default(autoincrement())
  reportId        Int              @map("report_id")
  url             String           @db.VarChar(512)
  name            String           @db.VarChar(256)
  uploadedBy      Int              @map("uploaded_by")
  relatedEntity   AttachmentEntity @map("related_entity")
  relatedEntityId Int              @map("related_entity_id")
  createdAt       DateTime         @default(now()) @map("created_at") @db.Timestamp()

  //Prisma Client
  report       Report @relation(fields: [reportId], references: [id], onDelete: Cascade)
  uploadByUser User   @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)

  @@map("report_attachment")
}

//Loan Model
model Loan {
  id               Int        @id @unique @default(autoincrement())
  name             String     @db.VarChar(256)
  userId           Int        @map("user_id")
  amount           Decimal    @db.Decimal(15, 2)
  interestRate     Decimal    @map("interest_rate") @db.Decimal(5, 2)
  termMonths       Int        @map("term_months")
  startDate        DateTime   @map("start_date") @db.Date
  status           LoanStatus @default(ACTIVE)
  remainingBalance Decimal    @map("remaining_balance") @db.Decimal(15, 2)
  createdAt        DateTime   @default(now()) @map("created_at") @db.Timestamp()
  updatedAt        DateTime?  @map("updated_at") @db.Timestamp()

  //Prisma Client
  monthlyPayments MonthlyPaymentLoan[]
  extraPayments   ExtraPaymentLoan[]
  user            User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("loan")
}

model ExtraPaymentLoan {
  id          Int         @id @unique @default(autoincrement())
  loanId      Int         @map("loan_id")
  paymentDate DateTime    @default(now()) @map("payment_date") @db.Timestamp()
  amount      Decimal     @db.Decimal(15, 2)
  paymentType TypePayment @map("payment_type")
  createdAt   DateTime    @default(now()) @map("created_at") @db.Timestamp()
  updatedAt   DateTime?   @map("updated_at") @db.Timestamp()

  //Prisma Client
  loan Loan @relation(fields: [loanId], references: [id], onDelete: Cascade)

  @@map("extra_payment_loan")
}

model MonthlyPaymentLoan {
  id          Int       @id @unique @default(autoincrement())
  loanId      Int       @map("loan_id")
  paymentDate DateTime  @default(now()) @map("payment_date") @db.Timestamp()
  amount      Decimal   @db.Decimal(15, 2)
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamp()
  updatedAt   DateTime? @map("updated_at") @db.Timestamp()

  //Prisma Client
  loan Loan @relation(fields: [loanId], references: [id], onDelete: Cascade)

  @@map("monthly_payment_loan")
}

//Saving model
model Saving {
  id        Int       @id @unique @default(autoincrement())
  name      String    @db.VarChar(256)
  userId    Int       @map("user_id")
  goal      Decimal?  @db.Decimal(15, 2)
  amount    Decimal   @db.Decimal(15, 2)
  active    Boolean   @default(true)
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp()
  updatedAt DateTime? @map("updated_at") @db.Timestamp()

  //Prisma Client
  histories HistorySaving[]
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("saving")
}

model HistorySaving {
  id        Int       @id @unique @default(autoincrement())
  savingId  Int       @map("saving_id")
  amount    Decimal   @db.Decimal(15, 2)
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp()
  updatedAt DateTime? @map("updated_at") @db.Timestamp()

  //Prisma Client
  saving Saving @relation(fields: [savingId], references: [id], onDelete: Cascade)

  @@map("history_saving")
}
