import { AttachmentEntity, ReportStatus } from "enums"
import { User, User, User } from "user"

model Report {
    id             Int                @id @unique @default(autoincrement())
    name           String             @db.VarChar(256)
    startDate      DateTime           @default(now()) @db.Date
    finishDate     DateTime?          @db.Date
    status         ReportStatus       @default(CREATED)
    userId         Int                @map("user_id")
    updateById     Int?               @map("update_by_id")
    sharedReports  SharedReport[]
    reportExpenses ReportExpense[]
    reportIncomes  ReportIncome[]
    property       ReportProperty?
    attachments    ReportAttachment[]
    createdAt      DateTime           @default(now()) @map("created_at") @db.Timestamp()
    updatedAt      DateTime?          @updatedAt @map("updated_at") @db.Timestamp()

    user       User  @relation("CreateReports", fields: [userId], references: [id], onDelete: Cascade)
    updateUser User? @relation("UpdateReports", fields: [updateById], references: [id], onDelete: SetNull)

    @@unique([name, userId, startDate, finishDate])
    @@map("report")
}

model ReportProperty {
    id           Int       @id @unique @default(autoincrement())
    reportId     Int       @unique @map("report_id")
    goalExpenses Decimal   @map("goal_expenses")
    goalIncome   Decimal?  @map("goal_income")
    createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamp()
    updatedAt    DateTime? @updatedAt @map("updated_at") @db.Timestamp()

    report Report @relation(fields: [reportId], references: [id], onDelete: Cascade)

    @@map("report_property")
}

model Category {
    id                Int                     @id @unique @default(autoincrement())
    name              String                  @db.VarChar(256)
    expenses          Expense[]
    expenseProperties ReportExpenseProperty[]
    createdAt         DateTime                @default(now()) @map("created_at") @db.Timestamp()
    updatedAt         DateTime?               @updatedAt @map("updated_at") @db.Timestamp()

    @@map("category")
}

model SharedReport {
    id           Int              @id @unique @default(autoincrement())
    userId       Int              @map("user_id")
    reportId     Int              @map("report_id")
    permissionId Int              @map("permission_id")
    createdAt    DateTime         @default(now()) @map("created_at") @db.Timestamp()
    updatedAt    DateTime?        @updatedAt @map("updated_at") @db.Timestamp()
    user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)
    report       Report           @relation(fields: [reportId], references: [id], onDelete: Cascade)
    permission   PermissionReport @relation(fields: [permissionId], references: [id], onDelete: Restrict)

    @@unique([userId, reportId])
    @@index([userId])
    @@map("shared_report")
}

model PermissionReport {
    id            Int            @id @unique @default(autoincrement())
    name          String         @unique @db.VarChar(256)
    sharedReports SharedReport[]
    createdAt     DateTime       @default(now()) @map("created_at") @db.Timestamp()
    updatedAt     DateTime?      @updatedAt @map("updated_at") @db.Timestamp()

    @@map("permission_report")
}

model Expense {
    id             Int             @id @unique @default(autoincrement())
    name           String          @db.VarChar(256)
    description    String?
    userId         Int             @map("user_id")
    categoryId     Int?            @map("category_id")
    active         Boolean         @default(true)
    amount         Decimal         @db.Decimal(15, 2)
    createdAt      DateTime        @default(now()) @map("created_at") @db.Timestamp()
    updatedAt      DateTime?       @updatedAt @map("updated_at") @db.Timestamp()
    reportExpenses ReportExpense[]
    user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
    category       Category?       @relation(fields: [categoryId], references: [id], onDelete: SetNull)

    @@unique([name, userId])
    @@map("expense")
}

model Income {
    id            Int            @id @unique @default(autoincrement())
    name          String         @db.VarChar(256)
    description   String?
    amount        Decimal        @db.Decimal(15, 2)
    userId        Int            @map("user_id")
    active        Boolean        @default(true)
    reportIncomes ReportIncome[]
    createdAt     DateTime       @default(now()) @map("created_at") @db.Timestamp()
    updatedAt     DateTime?      @updatedAt @map("updated_at") @db.Timestamp()
    user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([name, userId])
    @@map("income")
}

model ReportExpense {
    id              Int                    @id @unique @default(autoincrement())
    reportId        Int                    @map("report_id")
    reportedDate    DateTime               @default(now()) @map("reported_date") @db.Timestamp()
    nameExpense     String                 @map("name_expense") @db.VarChar(256)
    expenseAmount   Decimal                @map("expense_amount") @db.Decimal(15, 2)
    parentExpenseId Int?                   @map("parent_expense_id")
    userId          Int                    @map("user_id")
    active          Boolean                @default(true)
    updateById      Int?                   @map("update_by_id")
    createdAt       DateTime               @default(now()) @map("created_at") @db.Timestamp()
    updatedAt       DateTime?              @updatedAt @map("updated_at") @db.Timestamp()
    report          Report                 @relation(fields: [reportId], references: [id], onDelete: Cascade)
    comments        ReportExpenseComment[]
    property        ReportExpenseProperty?
    expense         Expense?               @relation(fields: [parentExpenseId], references: [id], onDelete: SetNull, onUpdate: SetNull)
    user            User                   @relation("CreateReportExpenses", fields: [userId], references: [id], onDelete: Restrict)
    updateUser      User?                  @relation("UpdateReportExpenses", fields: [updateById], references: [id], onDelete: SetNull)

    @@index([reportId, reportedDate])
    @@map("report_expense")
}

model ReportExpenseProperty {
    id              Int           @id @unique @default(autoincrement())
    reportExpenseId Int           @unique @map("report_expense_id")
    description     String?
    categoryId      Int?          @map("category_id")
    category        Category?     @relation(fields: [categoryId], references: [id], onDelete: SetNull)
    reportExpense   ReportExpense @relation(fields: [reportExpenseId], references: [id], onDelete: Cascade)

    @@map("report_expense_property")
}

model ReportExpenseComment {
    id               Int                    @id @unique @default(autoincrement())
    reportExpenseId  Int                    @map("report_expense_id")
    comment          String
    userId           Int                    @map("user_id")
    parentCommentId  Int?                   @map("parent_comment_id")
    createdAt        DateTime               @default(now()) @map("created_at") @db.Timestamp()
    updatedAt        DateTime?              @updatedAt @map("updated_at") @db.Timestamp()
    reportExpense    ReportExpense          @relation(fields: [reportExpenseId], references: [id], onDelete: Cascade)
    user             User                   @relation(fields: [userId], references: [id], onDelete: Restrict)
    childrenComments ReportExpenseComment[] @relation("ChildrenComments")
    parentComment    ReportExpenseComment?  @relation("ChildrenComments", fields: [parentCommentId], references: [id], onDelete: Cascade)

    @@index([reportExpenseId, parentCommentId])
    @@map("report_expense_comment")
}

model ReportIncome {
    id             Int                   @id @unique @default(autoincrement())
    reportId       Int                   @map("report_id")
    reportedDate   DateTime              @default(now()) @map("reported_date") @db.Timestamp()
    nameIncome     String                @map("name_income") @db.VarChar(256)
    incomeAmount   Decimal               @map("income_amount") @db.Decimal(15, 2)
    parentIncomeId Int?                  @map("parent_income_id")
    userId         Int                   @map("user_id")
    description    String?
    active         Boolean               @default(true)
    updateById     Int?                  @map("update_by_id")
    createdAt      DateTime              @default(now()) @map("created_at") @db.Timestamp()
    updatedAt      DateTime?             @updatedAt @map("updated_at") @db.Timestamp()
    report         Report                @relation(fields: [reportId], references: [id], onDelete: Cascade)
    income         Income?               @relation(fields: [parentIncomeId], references: [id], onDelete: SetNull, onUpdate: SetNull)
    user           User                  @relation("CreateReportIncomes", fields: [userId], references: [id], onDelete: Restrict)
    updateUser     User?                 @relation("UpdateReportIncomes", fields: [updateById], references: [id], onDelete: SetNull)
    comments       ReportIncomeComment[]

    @@index([reportId, reportedDate])
    @@map("report_income")
}

model ReportIncomeComment {
    id               Int                   @id @unique @default(autoincrement())
    reportIncomeId   Int                   @map("report_income_id")
    comment          String
    userId           Int                   @map("user_id")
    parentCommentId  Int?                  @map("parent_comment_id")
    createdAt        DateTime              @default(now()) @map("created_at") @db.Timestamp()
    updatedAt        DateTime?             @updatedAt @map("updated_at") @db.Timestamp()
    user             User                  @relation(fields: [userId], references: [id], onDelete: Restrict)
    reportIncome     ReportIncome          @relation(fields: [reportIncomeId], references: [id], onDelete: Cascade)
    childrenComments ReportIncomeComment[] @relation("ChildrenIncomesComments")
    parentComment    ReportIncomeComment?  @relation("ChildrenIncomesComments", fields: [parentCommentId], references: [id], onDelete: Cascade)

    @@index([reportIncomeId, parentCommentId])
    @@map("report_income_comment")
}

model ReportAttachment {
    id              Int              @id @unique @default(autoincrement())
    reportId        Int              @map("report_id")
    url             String           @db.VarChar(512)
    name            String           @db.VarChar(256)
    uploadedBy      Int              @map("uploaded_by")
    relatedEntity   AttachmentEntity @map("related_entity")
    relatedEntityId Int              @map("related_entity_id")
    createdAt       DateTime         @default(now()) @map("created_at") @db.Timestamp()
    report          Report           @relation(fields: [reportId], references: [id], onDelete: Cascade)
    uploadByUser    User             @relation(fields: [uploadedBy], references: [id], onDelete: Restrict)

    @@map("report_attachment")
}
